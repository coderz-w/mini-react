(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	// <div>123</div>
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const Ref = 0b0010000;
	const Visibility = 0b0100000;
	const MutationMask = Placement | Update | ChildDeletion | Ref | Visibility;

	class FiberNode {
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    type;
	    tag;
	    pendingProps;
	    key;
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    stateNode;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    memoizedProps;
	    // eslint-disable-next-line
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag;
	        this.key = key;
	        // stateNode代表对应dom
	        this.stateNode = null;
	        this.type = null;
	        // 节点关系
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 工作单元所需属性
	        this.updateQueue = null;
	        this.memoizedState = null;
	        // 工作前props
	        this.pendingProps = pendingProps;
	        // 工作后props
	        this.memoizedProps = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	// 应用根节点
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	// 传入这些方便首次挂载新建fiber
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    // 其实每次传入的wip应该都是hostRootFiber,这里会判断是否为首屏，如果为首屏的话会为hostRootFiber创建alternate，所以无论是否首屏，进行reconcile时，两颗树上都存在hostRootFiber
	    if (wip === null) {
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.type = current.type;
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function') {
	        console.warn('未定义的type类型');
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	//创造一次更新
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	//创造更新队列
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            // eslint-disable-next-line
	            pending: null
	        },
	        dispatch: null
	    };
	};
	//将更新添加到更新队列中
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	    console.log(updateQueue.shared.pending);
	};
	//
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// 首次更新时需要插入大量dom我们需要分首屏和更新进行对首屏的额外优化
	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 该函数用于打上Placement标记，如果传入需要标记副作用且当前fiber的current为null则说明为首次，需要打上
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    console.log('childFiber Wrong');
	                    break;
	            }
	        }
	        // TODO 多节点
	        // 文本
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        //都不匹配
	        console.log('other Type');
	        return null;
	    };
	}
	// 分别导出
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFiber = ChildReconciler(false);

	const internals = React__namespace.__SECRET__INTERNALS__DO__NOT__USE__OR__YOU__WILL__BE__FIRER;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	// 记录当前render的函数fiber
	let currentlyRenderingFiber = null;
	// beginWork阶段返回函数组件的子fiber
	let workInProgressHook = null;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip) {
	    // 记录当前render的fiber
	    currentlyRenderingFiber = wip;
	    // 清空以便创建Hook链表
	    wip.memoizedState = null;
	    const current = wip.alternate;
	    if (current !== null) ;
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    // 重置记录的fiber
	    currentlyRenderingFiber = null;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState
	};
	function mountState(initialState) {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    // 这是hook的memoizedState,如对应到useState就是state
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    // 需要能够触发更新
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    // 与首屏不同，这里是从改变的地方开始，不过还是1会先返回到rootFiber
	    scheduleUpdateOnFiber(fiber);
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时的第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内使用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // 后续
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	// 递归 递阶段
	// 该阶段需要对比子fiber Node的current fiberNode 和 reactElement 来获取下一个wip
	// eslint-disable-next-line
	const beginWork = (wip) => {
	    console.log(wip, 'beginWork循环');
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            console.log('beginWrong', wip);
	            break;
	    }
	};
	function updateHostRoot(wip) {
	    // 计算最新值
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    console.log(pending, '我是pending，我马上被消费');
	    updateQueue.shared.pending = null;
	    // 第一次渲染时其实拿到的memoizedState就是reactDom.createElement('#root).render(<Element/>)中Element对应的reactElement对象
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    console.log(memoizedState, '我是memoizedState');
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	// hostComponent无法触发更新
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    console.log('创建子fiber', current, '这是current');
	    console.log(children, '这是children的reactElement');
	    if (current !== null) {
	        // update时，这里会有一种特殊情况，因为hostRootFiber肯定存在2个所以首屏的hostRootFiber也会进入这里
	        console.log('update和hostRoot的创建子节点');
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount时
	        wip.child = mountChildFiber(wip, null, children);
	    }
	}

	const createInstance = function (type) {
	    const element = document.createElement(type);
	    // updateFiberProps(element as DOMElement, props);
	    return element;
	    //  as DOMElement;
	};
	const appendInitialChild = function (parent, child) {
	    parent.appendChild(child);
	};
	const createTextInstance = function (content) {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    // 这里的遍历可以帮我们定位到最深(也不一定最深)的发生变化的节点(叶子节点或者不存在子元素变化的节点)，也就是说我们会通过递先找到他，然后在归的时候再进行我们的操作
	    while (nextEffect != null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        // 子节点还有mutation
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags && child != null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	function commitMutationEffectsOnFiber(finishedWork) {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement;
	    }
	}
	function commitPlacement(finishedWork) {
	    console.log(finishedWork, '进入place');
	    const hostParent = getHostParent(finishedWork);
	    appendPlacementNodeIntoContainer(finishedWork, hostParent);
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    console.log('未找到parent');
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    //fiber host
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// eslint-disable-next-line
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    // 构建离屏幕dom树 构建 插入
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 首屏
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 首屏
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        default:
	            console.warn('未处理的completeWork', wip);
	            break;
	    }
	};
	// 将子dom节点插入,这里的parent其实就是根据wip创建出来的dom节点
	// demo <wipElement>......manyChild<wipElement/>
	/**
	首先是一个外层循环
	进入循环判断child节点是否为原生类型节点或者其他类型(函数组件等)，如果是原生类型就可以把child直接插入

	1.如果是<wipElement><div>xxxxx<div/><wipElement/>
	这样的话循环其实已经结束了，因为我们是一个归的过程，div节点已经调用过appendAllChildren将他的子节点添加到了div上，我们只需要添加div到wip上其实就可以了，下面是
	这种情况的流程:
	首先
	if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node?.stateNode);
	}
	进入这里添加了div，然后
	if (node === wip) {
	    return;
	}
	这个没有进入
	while (node.sibling === null) {
	    if (node.return === null || node.return === wip) {
	        return;
	    }
	    node = node?.return;
	}
	进入这里，触发node.return===wip,结束
	2.如果是<wipElement><div1/><div2/><wipElement/>
	前两部分处理一致，第三部分没有进入，然后
	    node.sibling.return = node.return;
	    node = node.sibling;
	改变node指向为wip的child的邻节点，然后进入下一次循环，我们改变了node.sibling.return = node.return;，因此下次循环基本等同于上一个情况
	3.如果是<wipElement><otherElement><div1/><otherElement/><wipElement/>
	我们会在
	if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node?.stateNode);
	} else if (node.child !== null) {
	    node.child.return = node;
	    node = node.child;
	    continue;
	}
	进入第二种情况，然后如1，2两种情况处理

	 */
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        // 第一部分
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 第二部分
	        if (node === wip) {
	            return;
	        }
	        // 第三部分
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	// 指向当前工作的fiber
	let workInProgress = null;
	// 改变当前工作工作fiber
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// renderRoot由触发更新的api执行如reactDom.createRoot,setState
	function renderRoot(root) {
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            console.warn('wornLoop错误');
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // eslint-disable-next-line
	    console.log((finishedWork?.updateQueue).shared.pending, '准备commit');
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        console.log(finishedWork, 'finishedWork');
	        return;
	    }
	    // 消费后重置
	    root.finishedWork = null;
	    console.log('commit start');
	    // 判断是否有需要3个子阶段执行的操作
	    // beforeMutation
	    // mutation
	    // Layout
	    // commit阶段任务1.fiber树的切换，执行时间文mutation后，layout前 2.执行placeMent等操作
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) != NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // 无论是否需要操作都需要切换fiber树
	        commitMutationEffects(finishedWork);
	        console.log('分支一');
	        root.current = finishedWork;
	    }
	    else {
	        console.log('分支2');
	        root.current = finishedWork;
	    }
	}
	// workLoop循环
	function workLoop() {
	    while (workInProgress != null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	// 每个工作单元的调用执行
	function performUnitOfWork(fiber) {
	    console.log('每个工作单元');
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	// 归时工作单元处理的调用
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	// 当某个节点触发更新时递归回到fiberRootNode重新render
	function markUpdateFiber(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if ((node.tag = HostRoot)) {
	        return node.stateNode;
	    }
	    return null;
	}
	// 连接render后触发的更新
	function scheduleUpdateOnFiber(fiber) {
	    const root = markUpdateFiber(fiber);
	    renderRoot(root);
	}

	// createRoot调用
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	// Render调用
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    console.log(element);
	    const update = createUpdate(element);
	    console.log(update);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    console.log(hostRootFiber);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// React.createRoot(root).render(<App/>)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
